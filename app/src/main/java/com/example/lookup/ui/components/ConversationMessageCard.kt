package com.example.lookup.ui.components

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.tween
import androidx.compose.animation.expandVertically
import androidx.compose.animation.fadeIn
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.BoxWithConstraints
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.widthIn
import androidx.compose.material3.Card
import androidx.compose.material3.Icon
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.unit.dp
import coil.ImageLoader
import coil.compose.rememberAsyncImagePainter
import coil.decode.ImageDecoderDecoder
import coil.request.ImageRequest
import coil.size.Size
import com.example.lookup.R
import com.example.lookup.domain.home.ConversationMessage
import com.example.lookup.domain.home.ConversationMessage.UserMessage
import com.example.lookup.domain.home.ConversationMessage.AssistantMessage

/**
 * A message card composable.
 *
 * @param modifier The modifier to be applied to the message card.
 * @param conversationMessage The message to display.
 */
@Composable
fun ConversationMessageCard(
    modifier: Modifier = Modifier,
    conversationMessage: ConversationMessage
) {
    when (conversationMessage) {
        is AssistantMessage -> AssistantMessageCardV2(
            modifier = modifier,
            assistantMessage = conversationMessage
        )

        is ConversationMessage.UserMessage -> UserMessageCard(
            modifier = modifier,
            userMessage = conversationMessage
        )
    }
}

/**
 * Message card representing a message sent by the user.
 *
 * @param modifier The [Modifier] to be applied to the message card.
 * @param userMessage An instance of [UserMessage] representing the message sent by the user.
 */
@Composable
private fun UserMessageCard(
    modifier: Modifier = Modifier,
    userMessage: ConversationMessage.UserMessage
) {
    BoxWithConstraints(
        modifier = Modifier
            .fillMaxWidth()
            .then(modifier)
    ) {
        Card(
            modifier = Modifier
                .align(Alignment.TopEnd)
                .widthIn(max = this.maxWidth / 1.2f),
            content = { Text(modifier = Modifier.padding(16.dp), text = userMessage.content) }
        )
    }
}

/**
 * Message card representing a message generated by the AI assistant.
 *
 * @param modifier The [Modifier] to be applied to the message card.
 * @param assistantMessage An instance of [AssistantMessage] generated by the AI assistant.
 */
@Composable
private fun AssistantMessageCardV2(
    modifier: Modifier = Modifier,
    assistantMessage: AssistantMessage
) {
    val context = LocalContext.current
    val bardIcon = ImageVector.vectorResource(id = R.drawable.ic_bard_logo)
    val imageLoader = remember(context) {
        ImageLoader(context)
            .newBuilder()
            .components { add(ImageDecoderDecoder.Factory()) } // todo
            .build()
    }
    val imageRequest = remember(imageLoader) {
        ImageRequest.Builder(context)
            .data(R.drawable.bard_sparkle_thinking_anim)
            .size(Size.ORIGINAL)
            .build()
    }
    val asyncImagePainter = rememberAsyncImagePainter(
        model = imageRequest,
        imageLoader = imageLoader
    )
    var messageContent by remember { mutableStateOf<String?>(null) }

    LaunchedEffect(Unit) {
        messageContent = when (assistantMessage.content) {
            is AssistantMessage.Content.DeferredContent -> assistantMessage.content.deferredContent.await()
            is AssistantMessage.Content.Immediate -> assistantMessage.content.immediateContent
        }
    }
    Card(modifier = modifier) {
        Row(
            modifier = Modifier.padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            if (messageContent == null) {
                Image(
                    modifier = Modifier.size(24.dp),
                    painter = asyncImagePainter,
                    contentDescription = null
                )
            } else {
                Icon(
                    modifier = Modifier.size(24.dp),
                    imageVector = bardIcon,
                    contentDescription = null,
                    tint = Color.Unspecified
                )
            }
            AnimatedVisibility(
                visible = messageContent != null,
                enter = fadeIn(tween(durationMillis = 600)) + expandVertically(expandFrom = Alignment.Top)
            ) {
                Text(text = messageContent!!)
            }
        }
    }
}
