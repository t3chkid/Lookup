package com.example.lookup.data.repositories.landmark

import android.graphics.Bitmap
import android.view.Surface
import com.example.lookup.data.local.classifiers.LandmarksClassifier
import com.example.lookup.data.remote.languagemodels.textgenerator.TextGeneratorClient
import com.example.lookup.data.remote.languagemodels.textgenerator.models.buildTextGenerationPromptBody
import com.example.lookup.data.remote.languagemodels.textgenerator.models.firstResponse
import javax.inject.Inject

// TODO : add cache with age
class LookupLandmarkRepository @Inject constructor(
    private val landmarksClassifier: LandmarksClassifier,
    private val textGeneratorClient: TextGeneratorClient
) : LandmarkRepository {

    override suspend fun getDescriptionAboutLandmark(
        bitmap: Bitmap,
        surfaceRotation: Int
    ): Result<String> {
        // check if a valid value was provided for surface rotation
        val surfaceRotations = listOf(
            Surface.ROTATION_0,
            Surface.ROTATION_90,
            Surface.ROTATION_180,
            Surface.ROTATION_270
        )
        if (surfaceRotation !in surfaceRotations) {
            val exceptionMessage =
                "Invalid rotation. Please use one of the rotation constants from android.view.Surface."
            return Result.failure(IllegalArgumentException(exceptionMessage))
        }
        // classify based on the bitmap
        val classifierResult = landmarksClassifier.classify(
            bitmap = bitmap,
            rotation = convertSurfaceRotationToLandmarkRotation(surfaceRotation)
        )
        if (classifierResult.isFailure) return Result.failure(classifierResult.exceptionOrNull()!!)
        // generate information about location
        val identifiedLocation = classifierResult.getOrNull()!!.first().name
        return generateDescriptionForIdentifiedLocation(identifiedLocation)
    }

    override suspend fun getFAQListAboutLandmark(landmarkName: String): Result<List<String>> {
        val promptBody = buildTextGenerationPromptBody(
            systemPrompt = "List out 5 very short questions that a traveller might ask a guide about this place.",
            userPrompt = landmarkName
        )
        val questionsResponse = textGeneratorClient.generateTextForPrompt(promptBody)
        if (!questionsResponse.isSuccessful) {
            val exception = Exception(questionsResponse.errorBody()?.string() ?: "")
            return Result.failure(exception)
        }
        val questionsList = questionsResponse.body()!!.firstResponse.lines().map {
            // remove the numbered bullet points generated by the model
            // Eg "1. Some Text" will be mapped to "Some text"
            it.replace(regex = Regex("[0-9]\\.\\s"), replacement = "")
        }
        return Result.success(questionsList)
    }

    private suspend fun generateDescriptionForIdentifiedLocation(identifiedLocation: String): Result<String> {
        val promptBody = buildTextGenerationPromptBody(
            systemPrompt = "You are a travel guide. Give a concise explanation about this landmark.",
            userPrompt = identifiedLocation,
            maxResponseTokens = 100
        )
        val textGenerationResult = textGeneratorClient.generateTextForPrompt(promptBody)
        if (!textGenerationResult.isSuccessful) {
            var errorMessage = "An error occurred when making a request to generate text"
            textGenerationResult.errorBody()?.let { errorMessage = "$errorMessage : $it" }
            val exception = Exception(errorMessage)
            return Result.failure(exception)
        }
        val description = textGenerationResult.body()!!.firstResponse
        return Result.success(description)
    }

    private fun convertSurfaceRotationToLandmarkRotation(surfaceRotation: Int): LandmarksClassifier.Rotation {
        return when (surfaceRotation) {
            Surface.ROTATION_0 -> LandmarksClassifier.Rotation.ROTATION_0
            Surface.ROTATION_90 -> LandmarksClassifier.Rotation.ROTATION_90
            Surface.ROTATION_180 -> LandmarksClassifier.Rotation.ROTATION_180
            else -> LandmarksClassifier.Rotation.ROTATION_270
        }
    }

}